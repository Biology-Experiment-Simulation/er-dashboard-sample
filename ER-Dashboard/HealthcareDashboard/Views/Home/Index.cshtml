@{
    ViewBag.Title = "ER Dashboard";
}

@section Head {
   @* <link id="layoutLink" href="@Url.Content("~/Content/Layout3.css")" type="text/css" rel="stylesheet" />*@
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <script src="@Url.Content("~/Scripts/app/StateEngine.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/app/ControlManager.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/app/Localizer.js")" type="text/javascript"></script>
    
    <!-- Load the language JS file calculated by the controller action method -->
    <script src="@ViewBag.ResourceFile" type="text/javascript"></script>

    <script type="text/javascript">
        var selectedAdmittance,   //  Global variable to hold the selected patient/admittance ID
        patients,
        vitals,
        medTests,
        orders,
        isLandscape = true,
        mainTileManagerSelector = "#layoutContainer",
        informationDialogSelector = "#infoDialog",
        gridPatienceSelector = "#gridPatients",
        imageViewerSelector = "#imageTestsResults",
        currentLanguage = "@ViewBag.Language",
        //  Localization variables
        //  resources is defined in the specific locale's JS file (for example, ja.js for Japanese ja locale)
        loc = new Localizer(resources),
        locIndex = loc.get("Index");    //  Cache the Index view localization items for performance and clarity
        

        $(function () {
            //Localize all the resource strings on the index page
            loc.localizeView("Index");
            //Simulate Clock on the main view
            //        
            self.setInterval('setTimeLabel()', 1000);
            $.ig.regional.defaults = $.extend($.ig.regional.defaults, $.ig.regional[currentLanguage]);   
            //  Enable styling of BlockUI elements by CSS
            $.blockUI.defaults.css = {};
            $.blockUI.defaults.overlayCSS = {};
            createTiles();
            initTileManager();
            //initialize dialog
            $(informationDialogSelector).prepend(locIndex["InfoDescription"]);
            $(informationDialogSelector).igDialog({
                state: "closed",
                modal: true,
                draggable: false,
                resizable: false,
                headerText: locIndex["InfoHeader"],
                height: "350px"
            });
            $("#info").on("click", function () {
                //Open igDialig
                $(informationDialogSelector).igDialog("open");
            });
            $("#barcode").igQRCodeBarcode({
                height: "66px",
                width: "66px",
                errorCorrectionLevel: "low",
                barsFillMode: "ensureEqualSize",
                stretch: "none",
                data: locIndex["ShowCaseUrl"]
            });
           
        });

        function createTiles() {
            patients = new PatientsUI();
            loc.localizeView("Patients");
            patients.admittanceSelected = admittanceSelected;
            $("#tilePatients").unblock();

            vitals = new VitalsUI(loc);
            loc.localizeView("Vitals");
            $("#tileVitals").unblock();

            medTests = new MedTestsUI(loc);
            loc.localizeView("MedTests");
            $("#tileTests").unblock();

            orders = new OrdersUI(loc);
            loc.localizeView("Orders");
        }

        function initTileManager() {
            //Calculate outer height of the container holding the main igTileManager Component
            $(mainTileManagerSelector).outerHeight($(window).height() - $(mainTileManagerSelector).offset().top);

            $(mainTileManagerSelector).width("100%").igTileManager({
               marginLeft: 10,
               marginTop: 10,
               items: [{ colSpan: 2, rowSpan: 2, colIndex: 0, rowIndex: 0},
                            { colSpan: 2, rowSpan: 2, colIndex: 0, rowIndex: 2},
                            { colSpan: 2, rowSpan: 2, colIndex: 0, rowIndex: 4},
                            { colSpan: 8, rowSpan: 6, colIndex: 2, rowIndex: 0}],
                animationDuration: 150,
                maximizedTileIndex: 3,
                minimizedState: ".minimizedContainer",
                maximizedState: ".tileHeading, .tileContent",
                tileMaximizing: function (evt, ui) {
                    if (ui.tile && ui.minimizingTile && ui.tile.data("index") === ui.minimizingTile.data('index')) {
                        return false;
                    }
                    if (ui.minimizingTile.data("index") === 3) {
                        var selectedRow = $(gridPatienceSelector).igGridSelection("selectedRow");
                        if (selectedRow == null) {
                            return false;
                        }
                    }
                    //Patience Tile
                    if (ui.tile.data("index") === 3) {
                        patients.layoutChangedIndex(ui.minimizingTile.data("index"));
                    }                    
                },
                tileMinimizing: function (evt, ui) {
                    if (ui.tile.data("index") === 1) {
                        if (medTests.viewMode.viewMode == "chart") {
                            medTests.viewMode.modeHandlers.chart.exportImageAndHide();
                        }
                    }
                    if (ui.tile.data("index") === 0) {
                        if (vitals.viewMode.viewMode == "chart") {
                            vitals.viewMode.modeHandlers.chart.exportImageAndHide();
                        }
                    }
                },
                tileMaximized: function (evt, ui) {
                    //Medical Tests
                    if (ui.tile.data("index") === 1) {
                        if (medTests.viewMode.viewMode == "image") {
                            if ($(imageViewerSelector).is(":data('igTileManager')")) {
                                var interval = setInterval(function () {
                                    if ($(':animated').length === 0) {
                                        $(imageViewerSelector).igTileManager("minimize");
                                        $(imageViewerSelector).igTileManager("reflow", true);
                                        clearInterval(interval);
                                    }
                                }, 350);
                            }
                            
                        }
                        if (medTests.viewMode.viewMode == "chart") {
                            medTests.viewMode.modeHandlers.chart.showChartAndRemoveImage();
                        }
                    }
                    if (ui.tile.data("index") === 0) {
                        if (vitals.viewMode.viewMode == "chart") {
                            vitals.viewMode.modeHandlers.chart.showChartAndRemoveImage();
                        }
                    }
                },
                rendered: function () {
                    //We call this function manually when the tile manager gets rendered
                   setTimeout(function () {     
                        medTests.viewMode.modeHandlers.image.hide();
                    }, 100);
                    //$(mainTileManagerSelector).igTileManager('reflow', true, null);
                    setTimeout(function () {
                        orientationChanged();
                    }, 300);
                }

            });
        }

        function admittanceSelected(selectedAdmittance) {
            $("#labelPatient").html(" " + selectedAdmittance.Name);
            setDayLabel();
            setTimeLabel();
            vitals.showVitals(selectedAdmittance);
            medTests.showTests(selectedAdmittance);
            orders.showOrders(selectedAdmittance);            
        }

        function setDayLabel() {
            var d = new Date();
            
            $("#labelDay").html( $.ig.formatter(d, "date", $.ig.regional.defaults.dateLongPattern));
        }
        function setTimeLabel() {         
            var today = new Date(), hours, minutes, seconds;
            hours = today.getHours() <= 9 ? "0" + today.getHours().toString() : today.getHours();
            minutes = today.getMinutes() <= 9 ? "0" + today.getMinutes().toString() : today.getMinutes();
            seconds = today.getSeconds() <= 9 ? "0" + today.getSeconds().toString() : today.getSeconds();
            var d = hours + ":" + minutes + ":" + seconds;
            $("#labelTime").html(d);
        }
        //This function generates both lanscape and portrat configurations from current tiles position
        function GenerateConfigurations() {
            var configurations = {}, portraitConfiguration, landscapeConfiguration, items, i;
            portraitConfiguration = [{ colSpan: 4, rowSpan: 1, colIndex: 0, rowIndex: 0, itemIndex: 0 },
                                          { colSpan: 3, rowSpan: 1, colIndex: 4, rowIndex: 0, itemIndex: 1 },
                                          { colSpan: 3, rowSpan: 1, colIndex: 7, rowIndex: 0, itemIndex: 2 },
                                          { colSpan: 10, rowSpan: 5, colIndex: 0, rowIndex: 1, itemIndex: 3 }];

            landscapeConfiguration = [{ colSpan: 2, rowSpan: 2, colIndex: 0, rowIndex: 0, itemIndex: 0 },
                                            { colSpan: 2, rowSpan: 2, colIndex: 0, rowIndex: 2, itemIndex: 1 },
                                            { colSpan: 2, rowSpan: 2, colIndex: 0, rowIndex: 4, itemIndex: 2 },
                                            { colSpan: 8, rowSpan: 6, colIndex: 2, rowIndex: 0, itemIndex: 3 }];

            items = $(mainTileManagerSelector).igTileManager('layoutManager')._opt.gridLayout.items;
            portraitConfiguration = $.extend(true, portraitConfiguration, items);
            landscapeConfiguration = $.extend(true, landscapeConfiguration, items);
            for (i = 0; i < items.length; i++) {              
                switch (i) {
                    case 0:
                        //set both configurations
                        landscapeConfiguration[i].colSpan = 2;
                        landscapeConfiguration[i].rowSpan = 2;
                        landscapeConfiguration[i].colIndex = 0;
                        landscapeConfiguration[i].rowIndex = 0;
                        //Portrait
                        portraitConfiguration[i].colSpan = 4;
                        portraitConfiguration[i].rowSpan = 1;
                        portraitConfiguration[i].colIndex = 0;
                        portraitConfiguration[i].rowIndex = 0;
                        break;
                    case 1:
                        landscapeConfiguration[i].colSpan = 8;
                        landscapeConfiguration[i].rowSpan = 6;
                        landscapeConfiguration[i].colIndex = 2;
                        landscapeConfiguration[i].rowIndex = 0;
                        //Portrait
                        portraitConfiguration[i].colSpan = 10;
                        portraitConfiguration[i].rowSpan = 5;
                        portraitConfiguration[i].colIndex = 0;
                        portraitConfiguration[i].rowIndex = 1;
                        break;
                    case 2:
                        landscapeConfiguration[i].colSpan = 2;
                        landscapeConfiguration[i].rowSpan = 2;
                        landscapeConfiguration[i].colIndex = 0;
                        landscapeConfiguration[i].rowIndex = 2;

                        //Portrait
                        portraitConfiguration[i].colSpan = 3;
                        portraitConfiguration[i].rowSpan = 1;
                        portraitConfiguration[i].colIndex = 4;
                        portraitConfiguration[i].rowIndex = 0;
                        break;

                    case 3:
                        landscapeConfiguration[i].colSpan = 2;
                        landscapeConfiguration[i].rowSpan = 2;
                        landscapeConfiguration[i].colIndex = 0;
                        landscapeConfiguration[i].rowIndex = 4;
                        //Portrait
                        portraitConfiguration[i].colSpan = 3;
                        portraitConfiguration[i].rowSpan = 1;
                        portraitConfiguration[i].colIndex = 7;
                        portraitConfiguration[i].rowIndex = 0;
                        break;
                }
            }
           
            configurations.portait = portraitConfiguration;
            configurations.landscape = landscapeConfiguration;
            return configurations;
        }
        function reflowImageViewerAfterAnimationDone() {                
            if ($(imageViewerSelector).is(":data('igTileManager')")) {// true
                var interval = setInterval(function () {
                    //Waiting for animation ti finish and then reflow the ImageViewer
                    if ($(':animated').length === 0) {
                        clearInterval(interval);
                        var flag = $(imageViewerSelector).igTileManager("maximizedTile");
                        if (flag) {
                            $(imageViewerSelector).igTileManager('minimize');
                            //Waiting for minimize to finish
                            interval = setInterval(function () {
                                if ($(':animated').length === 0) {
                                    $(imageViewerSelector).igTileManager("reflow", true);
                                    clearInterval(interval);
                                }
                            }, 150);
                        } else {
                            $(imageViewerSelector).igTileManager('reflow', true);
                        }
                    }
                }, 150);
            }
        }
        function orientationChanged() {            
            if ($(window).height() > $(window).width()) {
                //Portrait
                if (isLandscape === true) {
                    var configurations = GenerateConfigurations();
                    $(mainTileManagerSelector).igTileManager('layoutManager')._opt.gridLayout.items = configurations.portait;
                    setTimeout(function () {
                        $(mainTileManagerSelector).igTileManager('reflow', true, null);
                        //Once Reflow of the main Tile Manager Starts it's best to wait for the animation to 
                        reflowImageViewerAfterAnimationDone();
                    }, 500);                    
                    isLandscape = false;
                }
            } else {
                //Landscape
                if (isLandscape === false) {
                    var configurations = GenerateConfigurations();
                    $(mainTileManagerSelector).igTileManager('layoutManager')._opt.gridLayout.items = configurations.landscape;
                    setTimeout(function () {
                        $(mainTileManagerSelector).igTileManager('reflow', true, null);
                        reflowImageViewerAfterAnimationDone();
                    }, 500);
                    isLandscape = true;
                }
            }
            setTimeout(function () {
                $.each($('.nonPatients').children('.blockMsg'), function (index, item) {
                    $(item).css({
                        marginTop: (-$(item).height() / 2),
                        marginLeft: (-$(item).width() / 1.60),
                        left: "50%",
                        top: "50%"
                    });
                });
            }, 1000);
        }
        //This function is for internal usage
        function setVersionInformation() {
            var assemblyVersion = '@(ViewBag.DllVersion)';
            var igScriptsVersion = $.ui.igGrid.version;
            var res = $("<span id='assemblyVersion'>" + assemblyVersion + "</span><br/><span id='igScriptsVersion'>" + igScriptsVersion + "</span>");
            $("#versionInfo").html(res);
        }
        $(document).ready(function () {
            window.onresize = function () {
                var newHeight = $(window).height() - $(".ui-igtilemanager").offset().top;    
                $(mainTileManagerSelector).outerHeight(newHeight);
                $(mainTileManagerSelector).igTileManager('reflow', true, null);                
                reflowImageViewerAfterAnimationDone();
                orientationChanged();      
            }
            setVersionInformation();
        });
    </script>
}

@section Body {
    <div class="container">
        <div class="row header">
            <div id="appBar" class="appBar span12">
                <span class="logoIcon">&nbsp;</span>
                    <span class="appBarItemPosition appBarHeading appName" data-localize="appTitle">ER Dashboard</span>
                    <span id="labelPatient" class="appBarItemPosition appBarHeading"></span>
                    <span id="labelDate" class="appBarItemPosition appBarText"></span>
                    <span id="labelDay" class="appBarItemPosition appBarText"></span>
                    <span id="labelTime" class="appBarItemPosition appBarText"></span>
                    <span id="info" class="appBarItemPosition appBarText"></span>
            </div>
        </div>
        <div id="layoutContainer" style="width:100%; height:600px; display:block">

            <div class="dashboardTile vitals nonPatients">
                @{Html.RenderPartial("Vitals");}
            </div>
            <div class="dashboardTile tests nonPatients">
                @{Html.RenderPartial("MedTests");}
            </div>
            <div class="dashboardTile orders nonPatients" >
                @{Html.RenderPartial("Orders");}
            </div>
            <div class="dashboardTile patients">
                @{Html.RenderPartial("Patients");}

            </div>
        </div>      
    </div>
        <div id="versionInfo" style="display:none"></div>
    <div id="infoDialog" data-localize="appInfo">
        <h4 id="controlsUsed" data-localize="controlsUsed">Controls Used:</h4>
        <span class="dialog-sprite ds-grid"></span><span class="control-title">Grid</span>
        <span class="dialog-sprite ds-chart"></span><span class="control-title">Data Chart</span>
        <span class="dialog-sprite ds-combo"></span><span class="control-title">Combo</span>
        <span class="dialog-sprite ds-tile"></span><span class="control-title">Tile Manager</span>
        <div class="dialog-dl-qr-wrap">
            <a href="http://www.infragistics.com/downloads/generate/00000000-0000-0000-0000-000000003663?thankYouEmailContentId=11129" target="_blank" class="dialog-download" data-localize="sourceDownload">Download Source Code</a>
            <span class="dialog-download-icon">&nbsp;</span>
            <span id="barcode"></span><span class="dialog-qr" data-localize="qrInfo">Scan to view on your mobile device!</span>
        </div>
        <div class="ignite-ui-about"><img src="@Url.Content("~/Content/images/igniteui.png")" /></div>
        <div class="infragistics-about"><img src="@Url.Content("~/Content/images/infragistics.png")" /></div>
	</div>
}
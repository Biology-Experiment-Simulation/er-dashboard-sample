<script type="text/javascript">
    function VitalsUI(localizer) {
        var thisTile = this;
        var vitalsTypes = null;

        var tileElement = "#tileVitals";
        var chartSelector = "#chartVitals";
        var gridVitalsContainer = "#gridVitalsContainer";
        var gridVitals = "#gridVitals";
        var locVitals = localizer.get("Vitals");

        this.dataSource = null;
        //  ------------------------------ Initialize chart manager
        var gridAreaRectChangedCount = 0;
        var windowRectChangedCount = 0;

        var getTextBounds = function (ctx, data, prop) {
            var name = "null";
            if (data.item() != null) {
                //name = data.item().prop.toString();
            }
            var height = ctx.measureText("M").width;
            var width = ctx.measureText("100").width;

            return { width: width, height: height };
        }

        var getRangeBounds = function (data) {
            var lowValue = NaN;
            var highValue = NaN;

            if (data.item() != null) {
                lowValue = data.item().BloodPressureLow;
                highValue = data.item().VitalSignValue;
            }

            lowValue = $(chartSelector).igDataChart("scaleValue", "yAxis", lowValue);
            highValue = $(chartSelector).igDataChart("scaleValue", "yAxis", highValue);

            return { low: lowValue, high: highValue };
        }

        var getMarkerBounds = function (ctx, x, y, data) {
            var low = getTextBounds(ctx, data, "BloodPressureLow");
            var high = getTextBounds(ctx, data, "VitalSignValue");

            var bounds = getRangeBounds(data);

            var top = bounds.high - (high.height + 5);
            var bottom = bounds.low;
            var grid = $(chartSelector).igDataChart("option", "gridAreaRect");

            if (top < grid.top) {
                top = grid.top;
            }

            if (bottom + low.height > grid.top + grid.height) {
                bottom = (grid.top + grid.height) - low.height;
            }

            return {
                highLeft: x - high.width / 2.0,
                highTop: top,
                lowLeft: x - low.width / 2.0,
                lowTop: bottom
            };
        }
        var rangeBarTextualMarker = {
            measure: function (measureInfo) {
                var cont = measureInfo.context;
                var data = measureInfo.data;

                //just stay centered, don't care about marker being hittable.
                measureInfo.width = 10;
                measureInfo.height = 10;
            },
            render: function (renderInfo) {
                var ctx = renderInfo.context,
                               radius;
                var data = renderInfo.data;
                if (renderInfo.isHitTestRender) {
                    return;
                } else {
                    ctx.fillStyle = "black";
                }

                var bounds = getMarkerBounds(ctx, renderInfo.xPosition, renderInfo.yPosition, data);
                if (isNaN(bounds.highLeft) ||
                    isNaN(bounds.highTop) ||
                    isNaN(bounds.lowLeft) ||
                    isNaN(bounds.lowTop)) {
                    return;
                }

                var highText = "";
                var lowText = "";
                if (data.item() != null) {
                    highText = data.item().VitalSignValue.toString();
                    lowText = data.item().BloodPressureLow.toString();
                }
                ctx.textBaseline = "top";
                ctx.fillText(highText, bounds.highLeft, bounds.highTop);
                ctx.fillText(lowText, bounds.lowLeft, bounds.lowTop);
            }
        };
        var rangeTextualMarker = {
            measure: function (measureInfo) {
                var cont = measureInfo.context;
                var data = measureInfo.data;

                //just stay centered, don't care about marker being hittable.
                measureInfo.width = 10;
                measureInfo.height = 10;
            },
            render: function (renderInfo) {
                var ctx = renderInfo.context,
                               radius;
                var data = renderInfo.data;
                if (renderInfo.isHitTestRender) {
                    return;
                } else {
                    ctx.fillStyle = "black";
                }

                var bounds = getMarkerBounds(ctx, renderInfo.xPosition, renderInfo.yPosition, data);
                if (isNaN(bounds.highLeft) ||
                    isNaN(bounds.highTop) ||
                    isNaN(bounds.lowLeft) ||
                    isNaN(bounds.lowTop)) {
                    return;
                }

                var highText = "";
                var lowText = "";
                if (data.item() != null) {
                    highText = data.item().VitalSignValue.toString();
                    lowText = data.item().BloodPressureLow.toString();
                    if (data.item().Timestamp.getUTCHours() == 7 && data.item().Timestamp.getUTCMinutes() == 0) {
                        //Increase the x axis
                        bounds.highLeft += 10;
                        bounds.lowLeft += 10;
                    }
                    if (data.item().Timestamp.getUTCHours() == 19 && data.item().Timestamp.getUTCMinutes() == 30) {
                        //Reduce the x axis
                        bounds.highLeft -= 10;
                        bounds.lowLeft -= 10;
                    }
                }
                ctx.textBaseline = "top";
                ctx.fillText(highText, bounds.highLeft, bounds.highTop);
                ctx.fillText(lowText, bounds.lowLeft, bounds.lowTop);
            }
        };
        var barTextualMarker = {
            measure: function (measureInfo) {
                var cont = measureInfo.context;
                var data = measureInfo.data;
                var name = "null";
                if (data.item() != null) {
                    name = data.item().VitalSignValue.toString();
                }
                var height = cont.measureText("M").width;
                var width = cont.measureText(name).width;
                measureInfo.width = width;
                measureInfo.height = height;
            },
            render: function (renderInfo) {
                var ctx = renderInfo.context,
                    radius;
                if (renderInfo.isHitTestRender) {
                    ctx.fillStyle = renderInfo.data.actualItemBrush().fill();
                } else {
                    ctx.fillStyle = "black";
                }

                var data = renderInfo.data;
                var name = data.item().VitalSignValue.toString();
                var halfWidth = renderInfo.availableWidth / 2.0;
                var halfHeight = renderInfo.availableHeight / 2.0;
                var x = renderInfo.xPosition - halfWidth;
                var y = renderInfo.yPosition - ((halfHeight * 2.0) + 5.0);
                if (data.item().Timestamp.getUTCHours() == 7 && data.item().Timestamp.getUTCMinutes() == 0) {
                    var actualWidth = renderInfo.context.measureText(name).width;
                    if (actualWidth > 20) {
                        //If current width of the text is higher than 20 - which is more than 4 digits, we increase the x axis
                        x += 5;
                    }
                }
                if (data.item().Timestamp.getUTCHours() == 19 && data.item().Timestamp.getUTCMinutes() == 30) {
                    var actualWidth = renderInfo.context.measureText(name).width;
                    //If current width of the text is higher than 20 - which is more than 4 digits, we decrease the x axis
                    if (actualWidth > 20) {
                        x -= 5;
                    }
                }
                if (y < 0) {
                    y += (halfHeight * 4.0);
                }

                if (renderInfo.isHitTestRender) {
                    ctx.fillRect(x, y, renderInfo.availableWidth, renderInfo.availableHeight);
                } else {
                    ctx.textBaseline = "top";
                    ctx.fillText(name, x, y);
                }
            }
        };
        var textualMarker = {
            measure: function (measureInfo) {
                var cont = measureInfo.context;
                var data = measureInfo.data;
                var name = "null";
                if (data.item() != null) {
                    name = data.item().VitalSignValue.toString();
                }
                var height = cont.measureText("M").width;
                var width = cont.measureText(name).width;
                measureInfo.width = width;
                measureInfo.height = height;
            },
            render: function (renderInfo) {
                var ctx = renderInfo.context,
                    radius;
                if (renderInfo.isHitTestRender) {
                    ctx.fillStyle = renderInfo.data.actualItemBrush().fill();
                } else {
                    ctx.fillStyle = "black";
                }

                var data = renderInfo.data;
                var name = data.item().VitalSignValue.toString();
                var halfWidth = renderInfo.availableWidth / 2.0;
                var halfHeight = renderInfo.availableHeight / 2.0;
                var x = renderInfo.xPosition - halfWidth;
                if (data.item().Timestamp.getUTCHours() == 7 && data.item().Timestamp.getUTCMinutes() == 0) {
                    x += halfWidth;
                }
                if (data.item().Timestamp.getUTCHours() == 19 && data.item().Timestamp.getUTCMinutes() == 30) {
                    x -= halfWidth;
                }
                var y = renderInfo.yPosition - ((halfHeight * 2.0) + 5.0);
                if (y < 0) {
                    y += (halfHeight * 4.0);
                }

                if (renderInfo.isHitTestRender) {
                    ctx.fillRect(x, y, renderInfo.availableWidth, renderInfo.availableHeight);
                } else {
                    ctx.textBaseline = "top";
                    ctx.fillText(name, x, y);
                }
            }
        };
        var chartManager = new ControlManager({
            selector: chartSelector,
            create: function (data) {
                var values = findMinMaxValue(data.dataView());
                $(chartSelector).igDataChart({
                    width: "98%",
                    height: "100%",
                    windowResponse: "deferred",
                    dataSource: data.dataView(),
                    rightMargin: 10,
                    axes: [
                        {
                            name: "xAxis",
                            type: "categoryX",
                            label: "Timestamp",
                            interval: 1,
                            labelAngle: 75,
                            labelExtent: 55,
                            

                            title: $.ig.formatter(getYesterday(), "date", $.ig.regional.defaults.datePattern),
                            formatLabel: function (item) {
                                //We are calling formatted with enableUTCDates option
                                return $.ig.formatter(item.Timestamp, "date", "HH:mm", false, true);
                            }
                        }, {
                            name: "yAxis",
                            type: "numericY",
                            labelExtent: 45,
                            titleAngle: 270,
                            maximumValue: values.max + 3,
                            minimumValue: values.min - 3
                        }
                    ],
                    series: [
                        createCategorySeries("line")
                    ],
                    horizontalZoomable: false,
                    verticalZoomable: false,
                    windowResponse: "immediate",
               });
                var interval = setInterval(function () {
                    if ($(chartSelector).data() !== null) {
                        thisTile.exportImage(chartSelector);
                        clearInterval(interval);
                    }
                }, 1000);
              
            },
            updateData: function (data) {
                $("#chartVitals").igDataChart("option", "dataSource", data.dataView());
                var values = findMinMaxValue(data.dataView()),
                    title;
                if (data.dataView().length > 0) {
                    title = setVitalYAxisTitle(data.dataView()[0]);
                    //Here we need to update chart series due to source selected
                    setVitalsChartSeriesByItem(data.dataView()[0]);
                } else {
                    title = "";
                }
                $("#chartVitals").igDataChart("option", "axes", 
                    [{
                        name: "yAxis",
                        type: "numericY",
                        title: title,
                        maximumValue: values.max + 4,
                        minimumValue: values.min - 4
                    }]);
            }
        });
        function setVitalsChartSeriesByItem(item) {
            switch (item.VitalSignTypeID) {
                case 1:
                    //Temperature
                    thisTile.chartMode.toggleMode("line");
                    break;
                case 2:
                    //Blood Pressure
                    thisTile.chartMode.toggleMode("rangeColumn");
                    break;
                case 3:
                    //Pulse
                    thisTile.chartMode.toggleMode("line");
                    break;
                case 4:
                    //Respiratory Rate
                    thisTile.chartMode.toggleMode("area");
                    break;
                case 5:
                    //Pain
                    thisTile.chartMode.toggleMode("column");
                    break;
                default:
                    return "";
            }
        }
        function setVitalYAxisTitle(item) {
            switch (item.VitalSignTypeID) {
                case 1:
                    return "fahrenheit";
                    break;
                case 2:
                    return "diastole / systole";
                    break;
                case 3:
                    return "beats / minute"
                    break;
                case 4:
                    return "inspiration / minute";
                    break;
                case 5:
                    return "pain";
                    break;
                default:
                    return "";
            }
        }
        function getYesterday() {
            //create the date
            var myDate = new Date();

            //subtract a day to the date
            myDate.setDate(myDate.getDate() - 1);
            return myDate;
        }
        //This function returns minimum and maximum values of an array of numbers(strings are allowed too) 
        //Return value object with two properties min and max
        function findMinMaxValue(arr) {
            var itemsArr = [], i, result = {};
            for (i = 0; i < arr.length; i++) {
                itemsArr.push(parseInt(arr[i].VitalSignValue));
                if (arr[i].VitalSignTypeID === 2) {
                    itemsArr.push(parseInt(arr[i].BloodPressureLow));
                }
            }
            result.min = Math.min.apply(null,itemsArr);
            result.max = Math.max.apply(null, itemsArr);
            return result;
        }


        //  ------------------------------ Initialize grid manager
        var gridManager = new ControlManager({
            selector: gridVitalsContainer,
            create: function(data) {
                $(gridVitalsContainer).show();
                $(gridVitals).igGrid({
                    width: "100%",
                    height: "100%",
                    autoGenerateColumns: false,
                    dataSource: data.dataView(),
                    columns: [
                        { headerText: locVitals.Time, key: "Timestamp", dataType: "date" },
                        { headerText: locVitals.VitalSign, key: "VitalSignType", dataType: "string" },
                        { headerText: locVitals.Value, key: "VitalSignValue", dataType: "string" }
                    ],
                    features: [
                        {
                            name: "Sorting",
                            type: "local",
                            columnSettings : [
                                { columnKey: "Time", allowSorting: false }, 
                                { columnKey: "VitalSignType",  allowSorting: false }, 
                                { columnKey: "VitalSignValue",  allowSorting: true }
                            ]
                        },
                    ]
                });
            },
            updateData: function(data) {
                $(gridVitals).igGrid("dataSourceObject", data.data());
                $(gridVitals).igGrid("dataBind");
            }
        });
        this.exportImage = function (chartSelector) {
            var img = $(chartSelector).igDataChart("exportImage");
            img.id = "chartExportedImage";
            img = $(img);
            img.css("width", "100%");
            img.css("height", "100%");
            $(".vitals").children(".tileContent").append(img);
            $(chartSelector).hide();
        }
        //  ------------------------------ Initialize view mode
        this.viewMode = new ViewMode({
            viewMode: "chart",
            modeHandlers: {
                "chart": {
                    name: "chart",
                    hide: chartManager.hide,
                    show: chartManager.show,
                    exportImageAndHide: function () {
                        thisTile.exportImage(chartSelector);
                    },
                    showChartAndRemoveImage: function () {
                        $(chartSelector).show();
                        $(".vitals").children(".tileContent").children("#chartExportedImage").remove();
                    },
                    icon: '@Url.Content("~/Content/images/GridMode.png")',
                    class: 'headingChartIcon gridSelectIcon',
                    nextMode: "grid"
                },
                "grid": {
                    name: "grid",
                    hide: function () {
                        gridManager.hide();
                        $("#cbxVitalSType").igCombo("option", "mode", "dropdown");
                    },
                    show: function() {
                        gridManager.show();
                        $("#cbxVitalSType").igCombo("option", "mode", "readonly");
                    },
                    icon: '@Url.Content("~/Content/images/ChartMode.png")',
                    class: 'headingChartIcon chartSelectIcon',
                    nextMode: "chart"
                }
            },
            viewModeChanged: function (viewMode) {
                $("#btnVGridChart span").attr("class", this.modeHandlers[viewMode].class);
            }
        });

        //  ------------------------------ Initialize chart series mode
        this.chartMode = new ViewMode({
            viewMode: "column",
            modeHandlers: {
                "line": {
                    show: function () {
                        updateChartSeries(createCategorySeries("line"));
                    }
                },
                "column": {
                    show: function () {
                        updateChartSeries(createCategorySeries("column"));
                    }
                },
                "area": {
                    show: function () {
                        updateChartSeries(createCategorySeries("area"));
                    }
                },
                "splineArea": {
                    show: function () { 
                        updateChartSeries(createCategorySeries("splineArea"));
                    }
                },
                "spline": {
                    show: function () {
                        updateChartSeries(createCategorySeries("spline"));
                    }
                },
                "rangeColumn": {
                    show: function () {
                        updateChartSeries(createRangeSeries("rangeColumn"));
                    }
                },
                "rangeArea": {
                    show: function () {
                        updateChartSeries(createRangeSeries("rangeArea"));
                    }
                }
            }
        });

        //  Initialize view
        initVitalsCombo(thisTile);

        $(chartSelector).hide();
        $(gridVitalsContainer).hide();

        hookChartGridModeEvent(thisTile);
        hookSeriesTypeEvent(thisTile);

        //  Public methods

        //  Get data about the requested admittance and update the view 
        //  to display the returned data
        this.showVitals = function (selectedAdmittance) {
            $.post('@Url.Action("GetVitalSignData")', { "admittanceID": selectedAdmittance.AdmittanceID })
                .success(vitalsDataSuccess);

            function vitalsDataSuccess(data, textStatus, jqXHR) {
                //  Wrap new patient admittance data in a data source object
                var ds = new $.ig.DataSource({
                    type: "json",
                    dataSource: data,
                    schema: {
                        fields: [
                            { name: "ID" },
                            { name: "AdmittanceID" },
                            { name: "Timestamp", type: "date" },
                            { name: "VitalSignValue" },
                            { name: "VitalSignTypeID" },
                            { name: "VitalSignType" },
                            { name: "BloodPressureLow" }
                        ]
                    }
                });
                ds.dataBind();
                //  Filter based on the currently selected vital sign type
                ds.filter([{
                        fieldName: "VitalSignTypeID",
                        cond: "equals",
                        expr: $("#cbxVitalSType").igCombo("value") || 3
                    }],
                    "AND",
                    false
                );
                //  Notify the tile that data has been updated
                dataUpdated(ds);
            }
        };

        this.layoutChanged = function (selectedLayout) {
        };

        //---------------------------------------------------------------------
        //  Implments logic to notify all controls that data has been updated and
        //  updates the whole view in general
        function dataUpdated(data) {
            thisTile.dataSource = data;
            chartManager.update(data);
            gridManager.update(data);

            thisTile.viewMode.UpdateCurrentView(data);
            $("#tileVitals").unblock();
        }

        //  Private methods
        function hookChartGridModeEvent(thisTile) {
            //  Grid/Chart mode button
            //debugger;
            $(document).delegate("#btnVGridChart", "click", function () {
                thisTile.viewMode.nextMode();
                if (thisTile.viewMode.viewMode === "grid") {
                    $("#categoryButtons").hide(); 
                    $("#rangeButtons").hide();
                    $("#cbxVitalSType").hide();
                    $("#selectedVital").hide();
                } else {
                    vitalsTypes[thisTile.currentDSIndex].handleSeriesButtons();
                    $("#cbxVitalSType").show();
                    $("#selectedVital").show();
                }
            });
        }

        function hookSeriesTypeEvent(thisTile) {
            //  Chart series type buttons
            $("#rangeButtons").hide();
            $(document).delegate("#categoryButtons .btnChartMode,#rangeButtons .btnChartMode", "click", function() {
                thisTile.chartMode.toggleMode($(this).attr("data-chartSeries"));
            });
        }
        function changeSelectedVitalSign(sign) {
            $("#selectedVital").fadeOut();
            setTimeout(function () {
                $("#selectedVital").text(sign);
            }, 400);
            $("#selectedVital").fadeIn();
        }
        function initVitalsCombo(thisTile) {
            $("#cbxVitalSType").igCombo({
                dataSource: '@Url.Action("GetVitalSignTypes")',
                textKey: "Name",
                valueKey: "ID",
                selectedItems: [{ index: 2 }],
                width: 180, 
                mode: "dropdown",
                enableClearButton: false,
                selectionChanged: function (evt, ui) {
                    //  Configure chart series selection buttons depending on the selected vital sign
                    
                    vitalsTypes[ui.items[0].index].handleSeriesButtons();
                    thisTile.currentDSIndex = ui.items[0].index;
                    changeSelectedVitalSign(ui.items[0].text);
                    //  Filter by the selected vital sign type for the chart series
                    thisTile.dataSource.filter([
                        {
                            fieldName: "VitalSignTypeID",
                            cond: "equals",
                            expr: ui.items[0].value.toString()
                        }],
                        "AND",
                        false
                    );
                    //  Notify about data changed
                    dataUpdated(thisTile.dataSource);
                },
                dataBound: function (evt, ui) {
                    var indx = $("#cbxVitalSType").igCombo("selectedIndex");
                    var vital = $("#cbxVitalSType").igCombo("itemByIndex", indx);
                    changeSelectedVitalSign(vital.text);
                    vitalsTypes = ui.dataSource.data();
                    thisTile.currentDSIndex = vitalsTypes[2].ID;
                    //  Set up custom logic depending on the vital sign type
                    for (i = 0; i < vitalsTypes.length; i++) {
                        if (vitalsTypes[i].ID !== 2) {
                            //  All vital signs to be depicted by category chart series 
                            vitalsTypes[i].createChartSeries = createCategorySeries;
                            vitalsTypes[i].handleSeriesButtons = showCategoryButtons;
                                
                        }
                        else {
                            //  All vital signs to be depicted by range category chart series
                            vitalsTypes[i].createChartSeries = createRangeSeries;
                            vitalsTypes[i].handleSeriesButtons = showRangeButtons;
                                
                        }
                    }
                },

            });
        }

        function showCategoryButtons() {
            if (!$("#categoryButtons").is(":visible")) {
                $("#rangeButtons").hide();
                $("#categoryButtons").fadeIn(500);
                thisTile.chartMode.toggleMode("column");
            }
        }

        function showRangeButtons() {
            if (!$("#rangeButtons").is(":visible")) {
                $("#categoryButtons").hide();
                $("#rangeButtons").fadeIn(500);
                thisTile.chartMode.toggleMode("rangeColumn");
            }
        }

        function createCategorySeries(seriesType) {
            return {
                name: "vsData",
                type: seriesType,
                isTransitionInEnabled: true,
                markerTemplate:  seriesType == 'column' ? barTextualMarker : textualMarker,
                xAxis: "xAxis",
                yAxis: "yAxis",
                valueMemberPath: "VitalSignValue"
            };
        }

        function createRangeSeries(seriesType) {
            return {
                name: "vsData",
                type: seriesType,
                isTransitionInEnabled: true,
                xAxis: "xAxis",
                markerTemplate: seriesType == "rangeColumn" ? rangeBarTextualMarker: rangeTextualMarker,
                yAxis: "yAxis",
                lowMemberPath: "BloodPressureLow",
                highMemberPath: "VitalSignValue"
            };
        }

        function updateChartSeries(newSeries) {
            var chart = $(chartVitals);
            chart.igDataChart("option", "series", [{ name: newSeries.name, remove: true}]);
            chart.igDataChart("option", "series", [ newSeries ]);
        }
    }
</script>

<div class="tileHeading">
    <span class="tileInfo">
        <span class="subHeadingIcon vitalSignsHeadingIcon">&nbsp;</span>
        <label class="tileUIElement tileTitle" data-localize="VitalSigns">Vital Signs</label>
        <span id="selectedVital" class="tileTitle selectedResource"></span>
    </span>
        <span class="rightAligned rightAlignedFix">
            <span id="cbxVitalSType"></span>

        </span>

    
        <a id="btnVGridChart" class="tileUIElement rightAligned">
            <span class="headingChartIcon gridSelectIcon">&nbsp;</span>
        </a>

        <span id="categoryButtons" class="rightAligned">

            <a  class="tileUIElement btnChartMode" data-chartSeries="column">
                <span class="headingChartIcon columnChartIcon">&nbsp;</span>
            </a>

            <a class="tileUIElement btnChartMode" data-chartSeries="line">
                <span class="headingChartIcon lineChartIcon">&nbsp;</span>
            </a>

            <a class="tileUIElement btnChartMode" data-chartSeries="spline">
                <span class="headingChartIcon splineChartIcon">&nbsp;</span>
            </a>

        </span>

        <span id="rangeButtons" class="rightAligned">

            <a class="tileUIElement btnChartMode" data-chartSeries="rangeColumn">
                <span class="headingChartIcon rangeColumnChartIcon">&nbsp;</span>
            </a>

            <a class="tileUIElement btnChartMode" data-chartSeries="rangeArea">
                <span class="headingChartIcon rangeAreaChartIcon">&nbsp;</span>
            </a>
            
        </span>
</div>
<div class="tileContent">
    <div id="gridVitalsContainer" style="width: 100%; height: 100%" >
        <table id="gridVitals"></table>
    </div>
    <div id="chartVitals"></div>
    <div id="legendChart"></div>
</div>
<div class="minimizedContainer">
    <div class="innerContainer">
        <span data-localize="VitalSigns">Vital Signs</span>
       <img src="@Url.Content("~/Content/images/tileicons/tileVitals.png")" alt="vitals" />
    </div>
</div>